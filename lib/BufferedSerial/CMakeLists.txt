# This file was automagically generated by mbed.org.
# If you would like to add your own targets, create a
# project.cmake file locally in your project directory.

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)
SET(CMAKE_SYSTEM_NAME Generic)
#SET(CMAKE_SYSTEM_PROCESSOR arm)
SET(CMAKE_CROSSCOMPILING TRUE)

# force compiler settings
SET(CMAKE_C_COMPILER_WORKS TRUE)
SET(CMAKE_CXX_COMPILER_WORKS TRUE)

# force cmake compilers
SET(CMAKE_ASM_COMPILER    "arm-none-eabi-gcc")
SET(CMAKE_C_COMPILER      "arm-none-eabi-gcc")
SET(CMAKE_CXX_COMPILER    "arm-none-eabi-g++")
SET(ELF2BIN               "arm-none-eabi-objcopy")


# if the environment does not specify build type, set to Debug
IF(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Debug"
        CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
        FORCE)
ENDIF()

# here starts the project
PROJECT(BufferedSerial C CXX ASM)

# uncomment below to have a verbose build process
#SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(LD_SYS_LIBS "-Wl,--start-group -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys  -Wl,--end-group")

SET(CMAKE_C_FLAGS "-std=gnu11 -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections -funsigned-char -MMD -fno-delete-null-pointer-checks -fomit-frame-pointer -Os -g -DMBED_TRAP_ERRORS_ENABLED=1 -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=softfp -DMBED_ROM_START=0x8000000 -DMBED_ROM_SIZE=0x200000 -DMBED_RAM_START=0x20000000 -DMBED_RAM_SIZE=0x20000 -DMBED_RAM1_START=0x24000000 -DMBED_RAM1_SIZE=0x80000 -include mbed_config.h")
SET(CMAKE_CXX_FLAGS "-std=gnu++14 -fno-rtti -Wvla -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections -funsigned-char -MMD -fno-delete-null-pointer-checks -fomit-frame-pointer -Os -g -DMBED_TRAP_ERRORS_ENABLED=1 -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=softfp -DMBED_ROM_START=0x8000000 -DMBED_ROM_SIZE=0x200000 -DMBED_RAM_START=0x20000000 -DMBED_RAM_SIZE=0x20000 -DMBED_RAM1_START=0x24000000 -DMBED_RAM1_SIZE=0x80000  -include mbed_config.h")
SET(CMAKE_ASM_FLAGS "-x assembler-with-cpp -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections -funsigned-char -MMD -fno-delete-null-pointer-checks -fomit-frame-pointer -Os -g -DMBED_TRAP_ERRORS_ENABLED=1 -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=softfp  -include mbed_config.h")
SET(CMAKE_CXX_LINK_FLAGS "-Wl,--gc-sections -Wl,--wrap,main -Wl,--wrap,__malloc_r -Wl,--wrap,__free_r -Wl,--wrap,__realloc_r -Wl,--wrap,__memalign_r -Wl,--wrap,__calloc_r -Wl,--wrap,exit -Wl,--wrap,atexit -Wl,-n -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=softfp -DMBED_ROM_START=0x8000000 -DMBED_ROM_SIZE=0x200000 -DMBED_RAM_START=0x20000000 -DMBED_RAM_SIZE=0x20000 -DMBED_RAM1_START=0x24000000 -DMBED_RAM1_SIZE=0x80000 -DMBED_BOOT_STACK_SIZE=4096 ")
SET(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} ${LD_SYS_LIBS} -T ${CMAKE_BINARY_DIR}/BufferedSerial_pp.link_script.ld")

ADD_DEFINITIONS(
  -DARM_MATH_CM7
  -DCOMPONENT_NSPE=1
  -DCOMPONENT_PSA_SRV_EMUL=1
  -DCOMPONENT_PSA_SRV_IMPL=1
  -DDEVICE_ANALOGIN=1
  -DDEVICE_ANALOGOUT=1
  -DDEVICE_CAN=1
  -DDEVICE_CRC=1
  -DDEVICE_EMAC=1
  -DDEVICE_FLASH=1
  -DDEVICE_I2C=1
  -DDEVICE_I2CSLAVE=1
  -DDEVICE_I2C_ASYNCH=1
  -DDEVICE_INTERRUPTIN=1
  -DDEVICE_LPTICKER=1
  -DDEVICE_MPU=1
  -DDEVICE_PORTIN=1
  -DDEVICE_PORTINOUT=1
  -DDEVICE_PORTOUT=1
  -DDEVICE_PWMOUT=1
  -DDEVICE_RESET_REASON=1
  -DDEVICE_RTC=1
  -DDEVICE_SERIAL=1
  -DDEVICE_SERIAL_FC=1
  -DDEVICE_SLEEP=1
  -DDEVICE_SPI=1
  -DDEVICE_SPISLAVE=1
  -DDEVICE_SPI_ASYNCH=1
  -DDEVICE_STDIO_MESSAGES=1
  -DDEVICE_TRNG=1
  -DDEVICE_USTICKER=1
  -DDEVICE_WATCHDOG=1
  -DEXTRA_IDLE_STACK_REQUIRED
  -DMBED_BUILD_TIMESTAMP=1575488274.59
  -DMBED_TICKLESS
  -DSTM32H743xx
  -DTARGET_CORTEX
  -DTARGET_CORTEX_M
  -DTARGET_FAMILY_STM32
  -DTARGET_FF_ARDUINO
  -DTARGET_LIKE_CORTEX_M7
  -DTARGET_LIKE_MBED
  -DTARGET_M7
  -DTARGET_NAME=NUCLEO_H743ZI2
  -DTARGET_NUCLEO_H743ZI2
  -DTARGET_RELEASE
  -DTARGET_RTOS_M4_M7
  -DTARGET_STM
  -DTARGET_STM32H7
  -DTARGET_STM32H743xI
  -DTARGET_STM_EMAC
  -DTOOLCHAIN_GCC
  -DTOOLCHAIN_GCC_ARM
  -DTRANSACTION_QUEUE_SIZE_SPI=2
  -DUSE_FULL_LL_DRIVER
  -DUSE_HAL_DRIVER
  -D__CMSIS_RTOS
  -D__CORTEX_M7
  -D__FPU_PRESENT=1
  -D__MBED_CMSIS_RTOS_CM
  -D__MBED__=1
  )
INCLUDE_DIRECTORIES(
  /usr/src/mbed-sdk
  
  )

# executable BufferedSerial
ADD_EXECUTABLE(BufferedSerial
  BufferedSerial.cpp
  BufferedSerial.h
  mbed_config.h
  )
SET_TARGET_PROPERTIES(BufferedSerial PROPERTIES ENABLE_EXPORTS 1)
# add syslibs dependencies to create the correct linker order
TARGET_LINK_LIBRARIES(BufferedSerial -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys)

add_custom_command(TARGET BufferedSerial PRE_LINK
                   COMMAND "arm-none-eabi-cpp" -E -P -Wl,--gc-sections -Wl,--wrap,main -Wl,--wrap,_malloc_r -Wl,--wrap,_free_r -Wl,--wrap,_realloc_r -Wl,--wrap,_memalign_r -Wl,--wrap,_calloc_r -Wl,--wrap,exit -Wl,--wrap,atexit -Wl,-n -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -mfloat-abi=softfp -DMBED_ROM_START=0x8000000 -DMBED_ROM_SIZE=0x200000 -DMBED_RAM_START=0x20000000 -DMBED_RAM_SIZE=0x20000 -DMBED_RAM1_START=0x24000000 -DMBED_RAM1_SIZE=0x80000 -DMBED_BOOT_STACK_SIZE=4096 None -o ${CMAKE_CURRENT_BINARY_DIR}/BufferedSerial_pp.link_script.ld
                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                   BYPRODUCTS "${CMAKE_CURRENT_BINARY_DIR}/BufferedSerial_pp.link_script.ld"
                   )

add_custom_command(TARGET BufferedSerial POST_BUILD
                   COMMAND ${ELF2BIN} -O ihex $<TARGET_FILE:BufferedSerial> $<TARGET_FILE:BufferedSerial>.hex
                   COMMAND ${CMAKE_COMMAND} -E echo "-- built: $<TARGET_FILE:BufferedSerial>.hex"
                  )




##########################################################################
# mbed-cli specific targets
##########################################################################

# detect the build type and select the corresponding cli profile
SET(MBED_BUILD_PROFILE "")
STRING(TOLOWER ${CMAKE_BUILD_TYPE} LOWERCASE_CMAKE_BUILD_TYPE)
IF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES debug)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/debug.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES relwithdebinfo)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/develop.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES release)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/release.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES minsizerel)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/release.json")
ELSE()
  MESSAGE(WARNING "Build type '${CMAKE_BUILD_TYPE}' is unknown, using debug profile")
  SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/debug.json")
ENDIF()

# optional custom target to build via mbed-cli
ADD_CUSTOM_TARGET(mbed-cli-build
        COMMAND ${CMAKE_COMMAND} -E echo "mbed compile --build BUILD/${CMAKE_BUILD_TYPE} --profile ${MBED_BUILD_PROFILE}"
        COMMAND mbed compile --build BUILD/${CMAKE_BUILD_TYPE} --profile ${MBED_BUILD_PROFILE}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        SOURCES ${SOURCE_FILES} ${SYS_SOURCE_FILES})

IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/project.cmake)
  INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/project.cmake)
ELSE()
  MESSAGE(STATUS "Add a local project.cmake file to add your own targets.")
ENDIF()

# this will take care of binary directories generated by cmake/clion not to confuse the cli build
FILE(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/.mbedignore" CONTENT "*")